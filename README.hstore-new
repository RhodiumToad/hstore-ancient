========================================================================
COMPATIBILITY WARNING
=====================

Before installing this code into any database that has previously used
the hstore type, whether from contrib/hstore or earlier CVS versions of
this module, MAKE SURE YOU TAKE BACKUPS and read carefully the UPGRADING
section of this file.

========================================================================

hstore-new
==========

This module is an enhanced version of the hstore type from
contrib/hstore, intended to allow the new features to be used in
existing postgresql versions. (This code is equivalent in
functionality and storage format to that in contrib/hstore from
8.5alpha2 onwards.)

This code supports all the functions provided by contrib/hstore from
versions prior to 8.5 and adds the following:

  - removal of 65535-byte limit on keys/values; both keys and values
    can now be as long as desired, within the 1GB limit for the whole
    hstore value (though you'll find a lot of stuff breaks if you have
    hstores over 500MB, so don't try).

  - support for btree and hash opclasses (allows hstores to be
    compared for equality or aggregated, and to have UNIQUE indexes as
    long as they are not too large for a btree index)

  - binary I/O now supported

  - many new functions and operators:

    hstore -> text[]  returns text[]   (slice to value array)
    hstore => text[]  returns hstore   (slice to new hstore)
    hstore ?| text[]  returns boolean  (check for any of a list of keys)
    hstore ?& text[]  returns boolean  (check for all of a list of keys)
    hstore - text     returns hstore   (delete one element)
    hstore - text[]   returns hstore   (delete many elements)
    hstore - hstore   returns hstore   (delete matching pairs)
    text[] => text[]  returns hstore   (construct from key/value arrays)
    hstore = hstore   returns boolean  (equality)
    hstore <> hstore  returns boolean  (inequality)
    record #= hstore  returns record   (see populate_record)
    %% hstore         returns text[]   (return key/value array)
    %# hstore         returns text[]   (return 2-d key/value array)

    hstore(text[])    - construct an hstore from a single array

  - conversions between hstore and record values:

    hstore(record)    - construct an hstore from a record
    populate_record(record,hstore)
        - fill in fields of a record as specified by an hstore


INSTALLATION
============

Compile and install the module as follows (ensuring that the pg_config
program for the installed server version is on your PATH):

    gmake install

Note that this installs the module under the name "hstore-new.so" to
avoid overwriting any previous hstore.so module. This step is safe to
perform even if you have existing hstore data.

If the old hstore type is not installed, you can simply install the
new one in the normal way, e.g.:

   psql -f "$(pg_config --sharedir)/contrib/hstore-new.sql" dbname

or using \i from inside psql.

The hstore-new.sql script is sensitive to the setting of the psql
variable hstore_new_schema to specify which schema to install into
(default "public"). This can be set from within psql by using

  \set hstore_new_schema 'myschema'

prior to using \i, or on the command line as:

  psql --set hstore_new_schema=myschema ...

(If the old hstore type is installed, but you have NO stored data that
uses it (i.e. no table columns of hstore type), then you can deinstall
the old type before installing the new one; it will be necessary to
recreate any functions that used hstore as a parameter or result type,
but otherwise the types are functionally compatible.)

It is safe to use the old and new hstore types in different databases
in the same cluster.


UPGRADING
=========

** ALWAYS MAKE BACKUPS BEFORE PROCEEDING FURTHER **

The most effective method to upgrade from any previous version is to
do a dump/restore as follows:

1) pg_dump the individual database(s) to be upgraded (do not use the
   -C/--create option on the dump)

2) drop or rename the affected databases, and recreate them (using
   template0 as the template)

3) pre-install hstore-new into the new databases following the
   procedure above (be sure to use the same schema that hstore was
   previously installed in)

4) restore the dumps, ignoring the errors about the hstore type and
   its functions, operators, operator classes etc. already existing

This method should enable all new functionality and convert all
existing data without issues.

However, if a dump/restore is impractical, then the following
procedure may be used for an in-place upgrade.

If the old hstore type is installed, then it is possible to replace it
with the new one, which is able to read existing data in the old
format.  But to eliminate an ambiguity in the data formats used by
older versions of hstore and hstore-new, you should run the following
command on every hstore column in your database, BEFORE attempting to
install the new version:

  ALTER TABLE tablename ALTER col TYPE hstore USING col::text::hstore;

This removes spurious padding that previous versions sometimes left
in hstore values, which interferes with the new code's ability to
auto-detect the storage format.

To ensure that the new index functionality is picked up, you can also
drop the hstore index opclasses at this point (which requires dropping
all indexes on hstore values) and recreate them later. To do this:

  DROP OPERATOR CLASS gist_hstore_ops USING gist CASCADE;
  DROP OPERATOR CLASS gin_hstore_ops USING gin CASCADE;

This drop will cascade to all hstore indexes; be sure you have a record
of all index definitions you want to restore later.

If at this point you install the new version (as per the install
instructions above), then most but not all of the new functionality
will become available. The missing functionality will be:

  - binary send/receive functions
  - gist/gin index support for ?&, ?|  (only if the index opclasses
    were not dropped as described above)

In addition, there may be some performance loss due to in-core
conversions of the old data values. Repeating the above ALTER TABLE
command on each hstore column after the upgrade will force all values
to be converted to the new format.




